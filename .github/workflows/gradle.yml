name: CI/CD

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build JAR & Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Gradle 캐시 복원
      - name: Restore Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-cache-

      # 환경 파일 생성 (Secret 주입)
      - name: Create application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.yml

      - name: Create docker-compose.prod.yml
        run: echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > ./docker-compose.prod.yml

      # JDK 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: clean bootJar

      # Docker 이미지 빌드
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spotinu .

      # DockerHub 로그인 & 푸시
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spotinu

  deploy:
    name: Deploy to APP_CENTER via SSH
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create docker-compose.prod.yml
        run: echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > ./docker-compose.prod.yml

      # docker-compose.prod.yml 서버 전송
      - name: Upload docker-compose.prod.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.APPCENTER_SERVER_IP }}
          username: ${{ secrets.APPCENTER_SERVER_USERNAME }}
          password: ${{ secrets.APPCENTER_SERVER_PASSWORD }}
          port: ${{ secrets.APPCENTER_SERVER_PORT }}
          source: "docker-compose.prod.yml"
          target: "/home/serverking/spotinu"

      # SSH 접속 후 배포
      - name: Deploy on APP_CENTER_SERVER
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.APPCENTER_SERVER_IP }}
          username: ${{ secrets.APPCENTER_SERVER_USERNAME }}
          password: ${{ secrets.APPCENTER_SERVER_PASSWORD }}
          port: ${{ secrets.APPCENTER_SERVER_PORT }}
          script: |
            cd /home/serverking/spotinu

            # 환경 파일 생성
            mkdir -p ./src/main/resources
            echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.yml

            # Docker 네트워크 확인/생성
            docker network inspect spotinu-network >/dev/null 2>&1 || docker network create spotinu-network

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spotinu

            # 기존 컨테이너 안전하게 중지/제거
            if [ "$(docker ps -q -f name=spotinu-backend)" ]; then
              docker stop spotinu-backend
#              docker rm -f spotinu-backend
            fi

            # docker-compose 실행 (백그라운드)
            docker-compose up -d spotinu-backend

            # 사용하지 않는 이미지/컨테이너 정리
#            docker system prune -af
